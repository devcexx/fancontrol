use super::ast;
use std::iter::FromIterator;

grammar;

match {
    r"\s*" => { },
    r"#[^\n\r]*[\n\r]*" => { },
    _
}

pub Program: ast::Program = {
    <stmts:Rule*> => ast::Program::new(Vec::from_iter(stmts.into_iter()))
}	

Rule: ast::Rule = {
    "DEFINE" <RuleDefine> ";" => ast::Rule::Define(<>),
    <t:Tag?> "WHEN" <r:RuleWhen> "END" => ast::Rule::When({ let mut rule = r.clone(); rule.tag = t; rule })
}

Tag: String = {
     <t:TagName> ":" => t
}

RuleDefine: ast::RuleDefine = {
    "DEVICE" <devname:Ident> "UDEV" "TAG" <tag:LitStr> "DRIVER" <dri:LitStr> <hotplug:"ALLOW HOTPLUG"?> => ast::RuleDefine::Device(ast::RuleDefineDevice::new(devname, tag, dri, hotplug.is_some())),
    "SENSOR" <Ident> "DEVICE" <Ident> "TYPE" <SensorType> "INDEX" <Integer> => ast::RuleDefine::Sensor(ast::RuleDefineSensor::new(<>)),
    "OUTPUT" <name:Ident> "DEVICE" <dev:Ident> "TYPE" <t:OutputType> "INDEX" <index:Integer> <pri:OutputPriorization?> =>
        ast::RuleDefine::Output(ast::RuleDefineOutput::new(name, dev, t, index, pri.unwrap_or(ast::OutputPriorization::Latest)))
}

OutputPriorization: ast::OutputPriorization = {
    "PRIORITIZE" <OutputPriorizationType> => <>
}

OutputPriorizationType: ast::OutputPriorization = {
    "MAX" => ast::OutputPriorization::Max,
    "MIN" => ast::OutputPriorization::Min,
    "LATEST" => ast::OutputPriorization::Latest
}

RuleWhen: ast::RuleWhen = {
    <ident:Ident> <cond:WhenCondition> "DO" <actions:WhenActionStmt*> => ast::RuleWhen::new(None, ident, cond, Vec::from_iter(actions.into_iter()))
}

WhenCondition: ast::WhenCondition = {
    "BETWEEN" <Integer> "AND" <Integer> => ast::WhenCondition::Between(<>),
    ">" <Integer> => ast::WhenCondition::GreaterThan(<>),
    "<" <Integer> => ast::WhenCondition::LessThan(<>)
}

WhenActionStmt: ast::WhenAction = {
    <WhenAction> ";"
}

WhenAction: ast::WhenAction = {
    "LOG" => ast::WhenAction::Log,
    "SET" <Ident> <WhenOutputValue> => ast::WhenAction::OutputSet(ast::WhenActionOutputSet::new(<>))
}

WhenOutputValue: ast::OutputValue = {
    "BETWEEN" <Percentage> "AND" <Percentage> => ast::OutputValue::Between(<>),
    "TO" <Percentage> => ast::OutputValue::Fixed(<>)
}

SensorType: ast::SensorType = {
    "TERMISTOR" => ast::SensorType::Termistor,
    "FAN" => ast::SensorType::Fan
}

OutputType: ast::OutputType = {
    "PWM" => ast::OutputType::Pwm
}

LitStr: String = <s:r#""([^"]*)""#> => {
  let s2 = &s[1..s.len() - 1];
  s2.into()
};

TagName: String = <s:r"[a-zA-Z$_][a-zA-Z0-9$_]*"> => s.into();
Ident: String = <s:r"`[a-zA-Z$_][a-zA-Z0-9$_]*`"> => (&s[1..s.len()-1]).into();
Integer: i32 = <s:r"(\\+|-)?[0-9]+"> => s.parse().expect(&format!("Invalid number: {}", s));
Percentage: i32 = <s:r"[0-9]+%"> => (&s[0..s.len()-1]).parse().unwrap();