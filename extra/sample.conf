# This is how you can define a device. A device maps directly to a
# hwmon kernel device. This device will be associated to the device
# that holds the tag specified after on the "UDEV TAG" statement. You
# probably want to create a udev rule in your device to map it to that
# tag. Make sure your matches exclusively devices on the hwmon
# subsystem, and that is specific enough to prevent that more than one
# device can hold this tag at a time, unless you want weird stuff to
# start happening.

# The driver statement defines how the program should communicate with
# the device. There are special devices that has specific ways for
# changing between automatic or manual PWM management, so it is
# required to be specified. See src/device/registry.rs to see all the
# available drivers. If unsure, try both hwmon and nct6775. At least
# one of them will work for driving common PWM devices.

# This device gathers the temps from the processor.
DEFINE DEVICE `processor`
       UDEV TAG "fancontrol_processor"
       DRIVER "hwmon";

# This device gives access to the temp of the cooling liquid and
# adjusting the speed of the pump.
DEFINE DEVICE `liquid_cooler`
       UDEV TAG "fancontrol_liquidcooler"
       DRIVER "hwmon";

# This device is the device for the Super I/O chip from the mobo, that
# handle the speed of all of the fans of the computer.
DEFINE DEVICE `mobo`
       UDEV TAG "fancontrol_mobo"
       DRIVER "nct6775";

# Defines a sensor, which is just an input source of data coming from
# a specific device. Parameters:
#
#  - DEVICE: the name of the device where the sensor is located.
#
#  - TYPE:   the type of the device. Currently the only supported value
#            is TERMISTOR.
#
#  - INDEX:  the index of the input source in the hwmon device. E.g, if
#            this sensor reads data from the `temp1` attribute of the
#            hwmon device, then INDEX must be 1, and so on.

# The temp of the processor die.
DEFINE SENSOR `die_temp`
       DEVICE `processor`
       TYPE TERMISTOR
       INDEX 3;

# The temp of the liquid from the liquid cooler.
DEFINE SENSOR `liquid_temp`
       DEVICE `liquid_cooler`
       TYPE TERMISTOR
       INDEX 1;

# Defines an output of a device, that the program can adjust based on
# the configured rules. Parameters:
#
#  - DEVICE:     the name of the device where the sensor is located.
#
#  - TYPE:       the type of the output. Currently the only supported value
#                is PWM, for controlling pwm-based outputs.
#
#  - INDEX:      the index of the output in the hwmon device. E. g, if this
#                sensor is intended to write values out to the `pwm1`
#                attribute of the hwmon device, then INDEX must be 1,
#                and so on.
#
#  - PRIORITIZE: Defines the behavior of this output when multiple
#                defined rules are triggered at once and require to
#                change the value of this output. As an example, let's
#                say that you want to make this output to change
#                according to the values of two different sensors and,
#                therefore, by two completely different rules. The
#                objective of this parameter is to define what value
#                should finally be written to this output when that
#                two rules (or more) are triggered at the same time by
#                reducing them into a single value. The possible
#                values are:
#                  - MAX:    Takes only the maximum value of the
#                            triggered rules (the common one).
#                  - MIN:    Takes only the minimum value of the
#                            triggered rules.
#                  - LATEST: Takes only the value of the triggered
#                            rule that is declared nearer to the end
#                            of this file, and is understood to have a
#                            higher priority over the previous rules.

# The radiator fans, connected to a single header of the mobo using a
# splitter.
DEFINE OUTPUT `radiator_fans`
       DEVICE `mobo`
       TYPE PWM
       INDEX 3
       PRIORITIZE MAX;

# The top fan of the case.
DEFINE OUTPUT `case_fan_top`
       DEVICE `mobo`
       TYPE PWM
       INDEX 1
       PRIORITIZE MAX;

# The rear fan of the case.
DEFINE OUTPUT `case_fan_rear`
       DEVICE `mobo`
       TYPE PWM
       INDEX 2
       PRIORITIZE MAX;

# The output that controls the pump speed of the liquid cooler.
DEFINE OUTPUT `pump`
       DEVICE `liquid_cooler`
       TYPE PWM
       INDEX 1
       PRIORITIZE MAX;

# Definition of a rule. A rule takes a sensor and compares its value
# against a constant value, using an specific comparator. This
# comparator can be a less than (<), greater than (>), or BETWEEN X
# AND Y. Additionally, each rule can have a tag associated, for better
# identifying it while debugging them.

liquid_low:
WHEN `liquid_temp` < 28 DO
     # Here are written all the actions that will be executed when the
     # condition of the rule is true.

     # The "SET" operation changes the value of a sensor when the rule
     # is triggered. Can be used to define a fixed, constant value to
     # an output.

     # The temp of the liquid is low, just chill.
     SET `radiator_fans` TO 10%;
     SET `case_fan_top` TO 20%;
     SET `case_fan_rear` TO 20%;
     SET `pump` TO 50%;
END

liquid_normal:
WHEN `liquid_temp` BETWEEN 28 AND 37 DO
     # Liquid temp is between the normal parameters, adjust the speed
     # of the fans linearly to the temp. Also, speed up the pump.

     # If the condition of the rule uses the BETWEEN
     # comparator, then a BETWEEN clause can be used for specifying
     # that we want the output to take a value between a minimum and a
     # maximum, whereas the minimum value is used when the sensor
     # reports the lowest value that can trigger this rule, the
     # maximum value is used when the sensor reports the highest value
     # that can trigger it, and a linear interpolation of these two
     # values if the value is somewhere between the range.
     SET `radiator_fans` BETWEEN 25% AND 90%;
     SET `case_fan_top` BETWEEN 40% AND 100%;
     SET `case_fan_rear` BETWEEN 40% AND 100%;
     SET `pump` TO 100%;
END

liquid_high:
WHEN `liquid_temp` > 37 DO
     # The temp of the liquid is quite high, setup everything to max.
     
     # The "LOG" operation just write on the logs of the program each
     # time that the rule is triggered. It includes the name of the
     # rule and the input value of the sensor in that moment.
     LOG;

     SET `radiator_fans` TO 100%;
     SET `case_fan_top` TO 100%;
     SET `case_fan_rear` TO 100%;
     SET `pump` TO 100%;
END

# Some rules to control outputs based on processor temps. Note that,
# since we're using outputs with PRIORITIZE MAX set, then, if more
# than one rule is triggered, the changes performed over the outputs
# will be smashed up and only will be taken the maximum ones for each
# output.

processor_low:
WHEN `die_temp` < 30 DO
     SET `radiator_fans` TO 10%;
     SET `case_fan_top` TO 20%;
     SET `case_fan_rear` TO 20%;
END

processor_normal:
WHEN `die_temp` BETWEEN 30 AND 50 DO
     SET `radiator_fans` BETWEEN 25% AND 35%;
     SET `case_fan_top` BETWEEN 40% AND 60%;
     SET `case_fan_rear` BETWEEN 40% AND 60%;
END

processor_high:
WHEN `die_temp` BETWEEN 51 AND 75 DO
     SET `radiator_fans` BETWEEN 35% AND 100%;
     SET `case_fan_top` BETWEEN 35% AND 100%;
     SET `case_fan_rear` BETWEEN 35% AND 100%;
END

processor_crit:
WHEN `die_temp` > 75 DO
     LOG;
     SET `radiator_fans` TO 100%;
     SET `case_fan_top` TO 100%;
     SET `case_fan_rear` TO 100%;
END
